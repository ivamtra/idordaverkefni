datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  name                 String //notandanafnið
  createdAt            DateTime               @default(now())
  roles                String //moderator eða admin
  hashedPassword       String
  salt                 String
  imageUrl             String // Fyrir profile-mynd
  Spurning             Spurning[]
  Svar                 Svar[]
  SvarComment          SvarComment[]
  UserLikesSvarEdaPost UserLikesSvarEdaPost[]
  UserLikesSvar        UserLikesSvar[]
  userLikesSpurning    userLikesSpurning[]
  userHasBadges        userHasBadges[]
}

model Spurning {
  id                   Int                    @id @default(autoincrement())
  title                String
  body                 String
  user                 User                   @relation(fields: [userId], references: [id])
  userId               Int
  createdAt            DateTime               @default(now())
  Svar                 Svar[]
  UserLikesSvarEdaPost UserLikesSvarEdaPost[]
  userLikesSpurning    userLikesSpurning[]
}

model Svar {
  id         Int      @id @default(autoincrement())
  title      String
  body       String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())
  spurning   Spurning @relation(fields: [spurningId], references: [id])
  spurningId Int

  UserLikesSvarEdaPost UserLikesSvarEdaPost[]
  UserLikesSvar        UserLikesSvar[]
}

model SvarComment {
  id        Int      @id @default(autoincrement())
  body      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  parentId  Int? // Vísa í komment fyrir ofan
  createdAt DateTime @default(now())
}

// Útfærslur á many-to-many venslunum fyrir
// Likes á svörum og spurningum

//------- Útfærsla 1 ------------------------

model UserLikesSvarEdaPost {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  action     String
  // Vandamál því svar gæti verið null þegar verið að vísa í spurningu
  // Gætum leyft svarId að vera 0 til að komast fram hjá þessu
  svar       Svar     @relation(fields: [svarId], references: [id])
  svarId     Int
  spurning   Spurning @relation(fields: [spurningId], references: [id])
  spurningId Int

  @@id([userId, spurningId, svarId])
}

// ------------------------------------------

//------- Útfærsla 2 ------------------------

model UserLikesSvar {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  action String
  svar   Svar   @relation(fields: [svarId], references: [id])
  svarId Int

  @@id([userId, svarId])
}

model userLikesSpurning {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  action String

  spurning   Spurning @relation(fields: [spurningId], references: [id])
  spurningId Int

  @@id([userId, spurningId])
}

// ------------------------------------------

model Badge {
  id            Int             @id @default(autoincrement())
  imageUrl      String
  title         String
  description   String
  userHasBadges userHasBadges[]
}

model userHasBadges {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  badge   Badge @relation(fields: [badgeId], references: [id])
  badgeId Int

  @@id([userId, badgeId])
}
