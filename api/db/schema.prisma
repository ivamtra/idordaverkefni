datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String //notandanafnið
  createdAt         DateTime            @default(now())
  roles             String              @default("user") //State of user. Moderator, admin, banned, etc.
  hashedPassword    String
  salt              String
  imageUrl          String // Fyrir profile-mynd
  Question          Question[]
  Answer            Answer[]
  AnswerComment     AnswerComment[]
  UserLikesAnswer   UserLikesAnswer[]
  UserLikesQuestion UserLikesQuestion[]
  UserHasBadges     UserHasBadges[]
  UserIsInGroup     UserIsInGroup[]
  UserLikesComment  UserLikesComment[]
}

// Svipað og facebook hópur
// Margir hópar til og hver user getur verið í mörgum hópum
model Group {
  id            Int             @id @default(autoincrement())
  name          String
  imageUrl      String
  createdAt     DateTime        @default(now())
  UserIsInGroup UserIsInGroup[]
}

model Question {
  id                   Int                    @id @default(autoincrement())
  title                String
  sentences            Sentence[] // Hver spurning getur innihaldið nokkrar setningar sem dæmi.
  language             String // Tungumálið í spurningunni
  definition           String // Enska/útlenska skilgreiningin
  other_info           String? // fleiri upplýsingar um orðið
  user                 User                   @relation(fields: [userId], references: [id])
  userId               Int
  createdAt            DateTime               @default(now())
  Answer               Answer[]
  UserLikesQuestion    UserLikesQuestion[]
  Issue                Issue[]
  UserLikesComment     UserLikesComment[]
  Category             Category?              @relation(fields: [categoryId], references: [id])
  categoryId           Int?
  questionIsInCategory questionIsInCategory[]
}

model Sentence {
  id         Int      @id @default(autoincrement())
  sentence   String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model Answer {
  id            Int      @id @default(autoincrement())
  title         String
  justification String
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime @default(now())
  question      Question @relation(fields: [questionId], references: [id])
  questionId    Int

  UserLikesAnswer UserLikesAnswer[]
  AnswerComment   AnswerComment[]
  translations    Translation[] // Hvert svar getur innihaldið nokkrar þýðingar
  Issue           Issue[]
}

// Hvert svar getur innihaldið margar þýðingar sem notandinn gefur.
model Translation {
  id          Int    @id @default(autoincrement())
  translation String
  answer      Answer @relation(fields: [answerId], references: [id])
  answerId    Int
}

model AnswerComment {
  id        Int      @id @default(autoincrement())
  body      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  parentId  Int? // Vísa í komment fyrir ofan
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  Int
  createdAt DateTime @default(now())
  Issue     Issue[]
}

model Category {
  id                   Int                    @id @default(autoincrement())
  titill               String
  litur                String
  Question             Question[]
  questionIsInCategory questionIsInCategory[]
}

// Útfærslur á many-to-many venslunum fyrir
// Likes á svörum og spurningum

//------- Útfærsla 1 ------------------------

// model UserLikesSvarEdaPost {
//   user       User     @relation(fields: [userId], references: [id])
//   userId     Int
//   action     String
//   // Vandamál því svar gæti verið null þegar verið að vísa í spurningu
//   // Gætum leyft svarId að vera 0 til að komast fram hjá þessu
//   svar       Svar     @relation(fields: [svarId], references: [id])
//   svarId     Int
//   spurning   Spurning @relation(fields: [spurningId], references: [id])
//   spurningId Int
//   dateTime   DateTime @default(now())

//   @@id([userId, spurningId, svarId])
// }

// ------------------------------------------

//------- Útfærsla 2 ------------------------

// Many to many vensl fyrir upvotes

//Hvaða user hefur upvote-að hvaða svar
model UserLikesAnswer {
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  action   String
  answer   Answer   @relation(fields: [answerId], references: [id])
  answerId Int
  dateTime DateTime @default(now())

  @@id([userId, answerId])
}

model UserLikesQuestion {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  action String

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  dateTime   DateTime @default(now())


  @@id([userId, questionId])
}

model UserLikesComment {
  user   User   @relation(fields: [userId], references: [id])
  action String

  question   Question @relation(fields: [questionId], references: [id])
  dateTime   DateTime @default(now())
  userId     Int
  questionId Int

  @@id([userId, questionId])
}

// ------------------------------------------

model Badge {
  id            Int             @id @default(autoincrement())
  imageUrl      String
  title         String
  description   String
  UserHasBadges UserHasBadges[]
}

// Hvaða user á hvaða badge
model UserHasBadges {
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  badge    Badge    @relation(fields: [badgeId], references: [id])
  badgeId  Int
  dateTime DateTime @default(now()) //Dagsetning þegar user fær verðlaun


  @@id([userId, badgeId])
}

// Vensl milli User og Group
model UserIsInGroup {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    Int
  timeJoined DateTime @default(now())

  @@id([userId, groupId])
}

// Tafla sem geymir vandamál t.d. ef comment er reportað
model Issue {
  id            Int           @id @default(autoincrement())
  question      Question      @relation(fields: [questionId], references: [id])
  answer        Answer        @relation(fields: [answerId], references: [id])
  answerComment AnswerComment @relation(fields: [answerCommentId], references: [id])

  description String // Lýsingin á vandamálinu

  // Gefum bull id ef notandinn gefur ekkert
  questionId      Int @default(0)
  answerId        Int @default(0)
  answerCommentId Int @default(0)
}

// Many-to-many vensl fyrir spurningar og flokka
model questionIsInCategory {
  question Question @relation(fields: [questionId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  questionId Int
  categoryId Int

  @@id([questionId, categoryId])
}
